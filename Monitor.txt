//===============================[ #include ]===============================

#include <WiFi.h>
#include <FirebaseESP32.h>

#define FIREBASE_HOST "YOUR_FIREBASE_PROJECT.firebaseio.com" //Do not include https:// in FIREBASE_HOST
#define FIREBASE_AUTH "YOUR_FIREBASE_DATABASE_SECRET"
#define WIFI_SSID "YOUR_WIFI_AP"
#define WIFI_PASSWORD "YOUR_WIFI_PASSWORD"

#include "time.h"
#include "RTClib.h"
//===============================[ Variable NTP ]===========================

const char* ssid = "JukegroW"; 
const char* password = "11111111"; 

int timezone = 7 * 3600;                    
int dst = 0;                                
int D=0,M=0,Y=0,h=0,m=0,s=0;
//===============================[ Variable RTC ]============================

RTC_DS3231 rtc;
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

//===============================[ Variable INPUT ]============================

int RED=25, BLUE=26, GREEN=27, LEDR=NULL, LEDB=NULL, LEDG=NULL, TimeRED=0, TimeBLUE=0, TimeGREEN=0, StatusLamp=NULL, Report=NULL, AllTime=NULL;

//===============================[ Variable TIMER ]============================

//hw_timer_t *timer = NULL;

void setup()
{
 #ifndef ESP8266
 while (!Serial);
 #endif
 Serial.begin(115200);
 Serial.setDebugOutput(true);

  pinMode(RED, INPUT);
  pinMode(BLUE, INPUT);
  pinMode(GREEN, INPUT);

  WiFi.mode(WIFI_STA);                                        
  WiFi.begin(ssid, password);
  Serial.println("\nConnecting WiFi");
  while (WiFi.status() != WL_CONNECTED) {
     Serial.print(".");
     delay(500);
   }
    configTime(timezone, dst, "pool.ntp.org", "time.nist.gov","asia.pool.ntp.org");     
    while (!time(nullptr)) {
      Serial.print(".");
      delay(500);
    }
    Serial.println(" ");
    Serial.println("Success NTP");
    delay(1000);
    
    configTime(timezone, dst, "pool.ntp.org", "time.nist.gov","asia.pool.ntp.org");
    time_t now = time(nullptr);
    struct tm* p_tm = localtime(&now);
    D=p_tm->tm_mday; 
    M=(p_tm->tm_mon)+1; 
    Y=(p_tm->tm_year)+1900;
    h=p_tm->tm_hour;
    m=p_tm->tm_min;
    s=p_tm->tm_sec;

    Serial.print(D);    Serial.print('/');    Serial.print(M);    Serial.print('/');    Serial.print(Y);    Serial.print(' ');
    Serial.print(h);    Serial.print(':');    Serial.print(m);    Serial.print(':');    Serial.print(s);    Serial.println();
    
  if (! rtc.begin()) 
    {
      Serial.println("Couldn't find RTC");
      while (1);
    }
      if (rtc.lostPower()) 
      {
        Serial.println("RTC lost power !!!");
        rtc.adjust(DateTime(Y, M, D, h, m, s));
      }
        rtc.adjust(DateTime(Y, M, D, h, m, s));
        Serial.println("Success RTC");

//    timer = timerBegin(0, 80, true);
//    timerAttachInterrupt(timer, &onTimer, true);
//    timerAlarmWrite(timer, 60000000, true);
//    timerAlarmEnable(timer);
}
        
void loop()
{
  Settime();
  DateTime now = rtc.now();
  LEDR = digitalRead(RED); 
  LEDB = digitalRead(BLUE);  
  LEDG = digitalRead(GREEN); 
  
  StatusLampCondition();

   switch (StatusLamp)
      {
          case 2:   TimeRED++;
                    Serial.print("STOP : "); Serial.print(TimeRED);  Serial.println(" sec");
                    Serial.print("WAIT : "); Serial.print(TimeBLUE);  Serial.println(" sec");
                    Serial.print("RUN : "); Serial.print(TimeGREEN);  Serial.println(" sec");
                    Report++;
                    if(Report<=1)
                      {
                        Serial.println("Save DATALOG ");
                        SerialMornitorDay_Time();
                        Firebase.setInt("/Monitor/LampRED", 1);
                      }
                    break;
          case 4:   TimeBLUE++;
                    Serial.print("STOP : "); Serial.print(TimeRED);  Serial.println(" sec");
                    Serial.print("WAIT : "); Serial.print(TimeBLUE);  Serial.println(" sec");
                    Serial.print("RUN : "); Serial.print(TimeGREEN);  Serial.println(" sec");
                    Report++;
                    if(Report<=1)
                      {
                        Serial.println("Save DATALOG ");
                        SerialMornitorDay_Time();
                        Firebase.setInt("/Monitor/LampBLUE", 1);
                      }
                   break;
          case 6:   TimeGREEN++;
                    Serial.print("STOP : "); Serial.print(TimeRED);  Serial.println(" sec");
                    Serial.print("WAIT : "); Serial.print(TimeBLUE);  Serial.println(" sec");
                    Serial.print("RUN : "); Serial.print(TimeGREEN);  Serial.println(" sec");
                    Report++;
                    if(Report<=1)
                      {
                        Serial.println("Save DATALOG ");
                        Firebase.setInt("/Monitor/LampGREEN", 1);
                        SerialMornitorDay_Time();
                      }
          case 7:   AllTime = TimeRED+TimeGREEN+TimeBLUE;
                    Serial.print("Alltime : "); Serial.print(AllTime);
                      
                    Report++;
                    if(Report<=1)
                      {
                        Serial.println("Save DATALOG ");
                        Firebase.setInt("/Monitor/AllTime", 1);
                        SerialMornitorDay_Time();
                      }
                   break;  
      }           
  delay(1000);
}

//void onTimer()
//{
//  Serial.println("Save DATALOG ");
//  SerialMornitorDay_Time();
//  Serial.print("STOP : "); Serial.print(TimeRED);  Serial.println(" sec");
//  Serial.print("WAIT : "); Serial.print(TimeBLUE);  Serial.println(" sec");
//  Serial.print("RUN : "); Serial.print(TimeGREEN);  Serial.println(" sec");
//}

void SerialMornitorDay_Time()
{
  Settime();
  DateTime now = rtc.now();
  Serial.print(daysOfTheWeek[now.dayOfTheWeek()]);
  Serial.print(' ');
  Serial.print(now.day(), DEC);
  Serial.print('/');
  Serial.print(now.month(), DEC);
  Serial.print('/');
  Serial.print(now.year(), DEC);
  Serial.print(' ');
  Serial.print(now.hour(), DEC);
  Serial.print(':');
  Serial.print(now.minute(), DEC);
  Serial.print(':');
  Serial.print(now.second(), DEC);
  Serial.println();
}
void StatusLampCondition()
{
  if(LEDR==0&&LEDB==1&&LEDG==1)
    {
      StatusLamp=2;
    }
  else if(LEDR==1&&LEDB==0&&LEDG==1)
    {
      StatusLamp=4;
    }
  else if(LEDR==1&&LEDB==1&&LEDG==0)
    {
      StatusLamp=6;
    }
  else if(LEDR==1&&LEDB==1&&LEDG==0)
    {
      StatusLamp=7;
    }
  else
    {
      StatusLamp=0; Report=0;
    }
}

void Settime()
{
    configTime(timezone, dst, "pool.ntp.org", "time.nist.gov","asia.pool.ntp.org");
    time_t now = time(nullptr);
    struct tm* p_tm = localtime(&now);
    D=p_tm->tm_mday; 
    M=(p_tm->tm_mon)+1; 
    Y=(p_tm->tm_year)+1900;
    h=p_tm->tm_hour;
    m=p_tm->tm_min;
    s=p_tm->tm_sec;
}